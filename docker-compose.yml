# docker-compose.yml
services:
  db:
    image: postgres:16
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  web:
    build: .
    command: >
      sh -c "python manage.py makemigrations &&
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 60 core.wsgi:application"
    volumes:
      - .:/app
      - ./staticfiles:/app/staticfiles  
    ports:
      - "8010:8000"  # Bind only to localhost for security
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: always
    env_file:
      - .env

  bot:
    build: .
    command: python manage.py startbot
    volumes:
      - .:/app
    depends_on:
      web:
        condition: service_started
      db:
        condition: service_healthy
    restart: always
    env_file:
      - .env
  
  redis:
    image: redis:7
    container_name: otz-redis
    ports:
      - "6379:6379"
    healthcheck:
     test: ["CMD", "redis-cli", "ping"]
     interval: 5s
     timeout: 3s
     retries: 5
  # Optional: Nginx container (alternative to host Nginx)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf
  #     - static_volume:/var/www/static
  #     - media_volume:/var/www/media
  #   depends_on:
  #     - web
  #   restart: always

volumes:
  postgres_data:
  static_volume:
